;;;
;;; Kernel standard library
;;;

; Section 5
;($define! car
;	($lambda ((x . #ignore)) x))
;($define! cdr
;	($lambda ((#ignore . x)) x))
;...
($define! caar
	($lambda (((x . #ignore) . #ignore)) x))
($define! cdar
	($lambda (((#ignore . x) . #ignore)) x))
($define! cadr
	($lambda ((#ignore x . #ignore)) x))
($define! cddr
	($lambda ((#ignore . (#ignore . x))) x))
;...
($define! caaar
	($lambda ((((x . #ignore) . #ignore) . #ignore)) x))
($define! cdaar
	($lambda ((((#ignore . x) . #ignore) . #ignore)) x))
($define! cadar
	($lambda (((#ignore . (x . #ignore)) . #ignore)) x))
($define! cddar
	($lambda (((#ignore . (#ignore . x)) . #ignore)) x))
($define! caadr
	($lambda ((#ignore . ((x . #ignore) . #ignore))) x))
($define! cdadr
	($lambda ((#ignore . ((#ignore . x) . #ignore))) x))
($define! caddr
	($lambda ((#ignore . (#ignore . (x . #ignore)))) x))
($define! cdddr
	($lambda ((#ignore . (#ignore . (#ignore . x)))) x))
;...
($define! caaaar
	($lambda (((((x . #ignore) . #ignore) . #ignore) . #ignore)) x))
($define! cdaaar
	($lambda (((((#ignore . x) . #ignore) . #ignore) . #ignore)) x))
($define! cadaar
	($lambda ((((#ignore . (x . #ignore)) . #ignore) . #ignore)) x))
($define! cddaar
	($lambda ((((#ignore . (#ignore . x)) . #ignore) . #ignore)) x))
($define! caadar
	($lambda (((#ignore . ((x . #ignore) . #ignore)) . #ignore)) x))
($define! cdadar
	($lambda (((#ignore . ((#ignore . x) . #ignore)) . #ignore)) x))
($define! caddar
	($lambda (((#ignore . (#ignore . (x . #ignore))) . #ignore)) x))
($define! cdddar
	($lambda (((#ignore . (#ignore . (#ignore . x))) . #ignore)) x))
;...
($define! caaadr
	($lambda ((#ignore . (((x . #ignore) . #ignore) . #ignore))) x))
($define! cdaadr
	($lambda ((#ignore . (((#ignore . x) . #ignore) . #ignore))) x))
($define! cadadr
	($lambda ((#ignore . ((#ignore . (x . #ignore)) . #ignore))) x))
($define! cddadr
	($lambda ((#ignore . ((#ignore . (#ignore . x)) . #ignore))) x))
($define! caaddr
	($lambda ((#ignore . (#ignore . ((x . #ignore) . #ignore)))) x))
($define! cdaddr
	($lambda ((#ignore . (#ignore . ((#ignore . x) . #ignore)))) x))
($define! cadddr
	($lambda ((#ignore . (#ignore . (#ignore . (x . #ignore))))) x))
($define! cddddr
	($lambda ((#ignore . (#ignore . (#ignore . (#ignore . x))))) x))
;...
($define! equal?
	($lambda (x y)
		($if (pair? x)
			($if (equal? (car x) (car y))
				(equal? (cdr x) (cdr y))
				#f)
			(eq? x y))))
($define! list*
	($lambda (head . tail)
		($if (null? tail)
			head
			(cons head (apply list* tail)))))
($define! $let
	($vau (bindings . body) env
		(eval (cons (list* $lambda (map car bindings) body)
			(map cadr bindings))
		env)))
($define! $cond
	($vau clauses env
		($if (null? clauses)
			#inert
			($let ((((test . body) . clauses) clauses))
				($if (eval test env)
					(apply (wrap $sequence) body env)
					(apply (wrap $cond) clauses env))))))
; Section 6
($define! not? ($lambda (x) ($if x #f #t)))
($define! $and?
	($vau x e
		($cond	((null? x) #t)
				((null? (cdr x)) (eval (car x) e))  ; tail context
				((eval (car x) e) (apply (wrap $and?) (cdr x) e))
				(#t #f))))
($define! $or?
	($vau x e
		($cond	((null? x) #f)
				((null? (cdr x)) (eval (car x) e))  ; tail context
				((eval (car x) e) #t)
				(#t (apply (wrap $or?) (cdr x) e)))))
($define! reduce  ; acyclic
	($lambda (ls bin id)
		($cond	((null? ls) id)
				((null? (cdr ls)) (car ls))
				(#t
					(bin (car ls) (reduce (cdr ls) bin id))))))
($define! get-current-environment (wrap ($vau () e e)))
($define! $remote-eval
	($vau (o e) d
		(eval o (eval e d))))
($define! $set!
	($vau (exp1 formals exp2) env
		(eval (list $define! formals
				(list (unwrap eval) exp2 env))
			(eval exp1 env))))
($define! $provide!
	($vau (symbols . body) env
		(eval (list $define! symbols
			(list $let ()
				(list* $sequence body)
				(list* list symbols)))
			env)))

;;;
;;; Concurrency
;;;

($define! $parallel list)  ; only valid because 'list' evals in parallel

;;;
;;; Bonus definitions
;;;

($define! Y  ; applicative Y-combinator (recursive fixed-point)
	($lambda (f) 
		(($lambda (g) 
			(g g)) 
			($lambda (h) 
				($lambda (x) 
					((f (h h)) x))))))
